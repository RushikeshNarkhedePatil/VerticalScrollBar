<resources>
    <string name="app_name">VerticalScrollBar</string>
    <string name="verticalscrollbardemo">VerticalScrollBarDemo</string>
    <string name="txtdemo">computer programming language, any of various languages
        for expressing a set of detailed instructions for a digital computer.
        Such instructions can be executed directly when they are in the computer
        manufacturer-specific numerical form known as machine language, after a simple substitution
        process when expressed in a corresponding assembly language, or after translation
        from some “higher-level” language.
        Although there are many computer languages, relatively few are widely used.
        Machine and assembly languages are “low-level,” requiring a programmer to manage explicitly
        all of a computer’s idiosyncratic features of data storage and operation.
        In contrast, high-level languages shield a programmer from worrying about such considerations
        and provide a notation that is more easily written and read by programmers.
        <b>Language types</b>\n
        <b>Machine and assembly languages</b>\n
        A machine language consists of the numeric codes for the operations that a particular
        computer can execute directly. The codes are strings of 0s and 1s, or binary digits (“bits”)
        which are frequently converted both from and to hexadecimal (base 16) for human viewing and
        modification. Machine language instructions typically use some bits to represent operations,
        such as addition, and some to represent operands, or perhaps the location of the next
        instruction. Machine language is difficult to read and write, since it does not resemble
        conventional mathematical notation or human language, and its codes vary from computer to
        computer.\n
        Assembly language is one level above machine language.
        It uses short mnemonic codes for instructions and allows the programmer to introduce names
        for blocks of memory that hold data. One might thus write “add pay, total”
        instead of “0110101100101000” for an instruction that adds two numbers.\n

        Assembly language is designed to be easily translated into machine language.
        Although blocks of data may be referred to by name instead of by their machine addresses,
        assembly language does not provide more sophisticated means of organizing complex information.
        Like machine language, assembly language requires detailed knowledge of internal computer
        architecture. It is useful when such details are important, as in programming a computer
        to interact with peripheral devices (printers, scanners, storage devices, and so forth).\n

        <b>Algorithmic languages</b>\n
        Algorithmic languages are designed to express mathematical or symbolic computations.
        They can express algebraic operations in notation similar to mathematics and allow the
        use of subprograms that package commonly used operations for reuse.
        They were the first high-level languages.\n

        <b>FORTRAN</b>\n
        The first important algorithmic language was FORTRAN (formula translation),
        designed in 1957 by an IBM team led by John Backus. It was intended for scientific
        computations with real numbers and collections of them organized as one- or multidimensional
        arrays. Its control structures included conditional IF statements,
        repetitive loops (so-called DO loops), and a GOTO statement that allowed nonsequential
        execution of program code. FORTRAN made it convenient to have subprograms for common
        mathematical operations, and built libraries of them.\n
        FORTRAN was also designed to translate into efficient machine language.
        It was immediately successful and continues to evolve.\n

        <b>ALGOL</b>\n
        ALGOL (algorithmic language) was designed by a committee of American and European computer
        scientists during 1958–60 for publishing algorithms, as well as for doing computations.
        Like LISP (described in the next section), ALGOL had recursive subprograms—procedures
        that could invoke themselves to solve a problem by reducing it to a smaller problem
        of the same kind. ALGOL introduced block structure, in which a program is composed of blocks
        that might contain both data and instructions and have the same structure as an entire
        program. Block structure became a powerful tool for building large programs out of small
        components.\n
        ALGOL contributed a notation for describing the structure of a programming language,
        Backus–Naur Form, which in some variation became the standard tool for stating the
        syntax (grammar) of programming languages. ALGOL was widely used in Europe, and for many years
        it remained the language in which computer algorithms were published. Many important languages,
        such as Pascal and Ada (both described later), are its descendants.\n

        <b>C</b>\n
        The C programming language was developed in 1972 by Dennis Ritchie and Brian Kernighan
        at the ATandT Corporation for programming computer operating systems.
        Its capacity to structure data and programs through the composition of smaller units is
        comparable to that of ALGOL. It uses a compact notation and provides the programmer with
        the ability to operate with the addresses of data as well as with their values.
        This ability is important in systems programming, and C shares with assembly language
        the power to exploit all the features of a computer’s internal architecture.
        C, along with its descendant C++, remains one of the most common languages.\n

    </string>
</resources>